"----------------
" general
"----------------
scriptencoding utf-8
set encoding=utf-8
set nocompatible               " no compatible
set t_Co=256                   " Use 256 colors
set backspace=indent,eol,start " fix the backspace in vim
set nobackup
set nowritebackup
set noswapfile                 " Don't write swp file
set autowrite                  " Automatically :write before running commands

" set clipboard to unnamed so we have proper clipboard copy
" for vim we need to install hombrew vim for it to work
set clipboard^=unnamed

" manage plugins using Vim plug
if filereadable(expand("~/.vimrc.plugins"))
  source ~/.vimrc.plugins
endif

"----------------
" GUI
"----------------
if has("gui_running")
  set guifont=Menlo:h14
  set go-=L   " remove left scrollbar
  set go-=r   " remove right scrollbar
endif

"----------------
" UI
"----------------
silent! colorscheme molokai
" paint colorcolumn with a custom color
highlight ColorColumn guibg=#32322f ctermbg=236
" vim-airline configuration
" remove airline separator left and right, the default is > and <
let g:airline_left_sep=''
let g:airline_right_sep=''
set laststatus=2                   " Always show the status line!
set ruler                          " show the cursor position all the time
set number                         " show numbers
set numberwidth=5
set showcmd                        " display incomplete commands
set listchars=tab:»·,eol:¬,trail:·
set diffopt+=vertical              " Always use vertical diffs
set history=50
set ignorecase
set incsearch
set showmatch
set list
set completeopt-=preview
" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

"----------------
" Text Formating
"----------------
syntax on
set autoindent
set softtabstop=2
set shiftwidth=2
set tabstop=4
set expandtab
set nosmarttab
set wrap
set linebreak
set textwidth=0
set colorcolumn=80,100

"----------------
" Autocomplete
"----------------
filetype plugin on
set omnifunc=syntaxcomplete#Complete

"----------------
" Mappings
"----------------
let mapleader = ','
inoremap jj <Esc>
nnoremap <leader>. :CtrlP<CR>
nnoremap <leader>d :NERDTreeToggle<CR>
nnoremap <leader>f :NERDTreeFind<CR>
nnoremap <leader>g :GitGutterToggle<CR>
nnoremap <silent> <leader>V :so ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
nnoremap <leader><space> :call StripTrailingWhitespaces()<CR>
" Shift + return to add end to ruby functions.
imap <S-CR> <CR><CR>end<Esc>-cc
imap ,. <C-X><C-O>
" Autocomplete for rails.vim
inoremap <C-Space> <C-x><C-u>
"----------------
"CtrlP
"----------------
let g:ctrlp_show_hidden = 1

"----------------
" functions
"----------------
function! StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let previous_search=@/
    let previous_cursor_line = line(".")
    let previous_cursor_column = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=previous_search
    call cursor(previous_cursor_line, previous_cursor_column)
endfunction

"----------------
" autocmd
"----------------
augroup vimrcEx
  autocmd!
  " strip trailing whitespace on Ruby buffer saves
  autocmd BufWritePre *.rb,*.markdown,*.md,*.html,*.css,*.scss,*.js call StripTrailingWhitespaces()
  " set spelling correction when in markdown files and in gitcommits
  autocmd BufRead,BufNewFile *.md,*.markdown setlocal spell
  " set md file type to markdown
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  " set spell in gitcommits
  autocmd FileType gitcommit setlocal spell
  " Automatically wrap at 80 characters for Markdown
  autocmd BufRead,BufNewFile *.md,*.markdown setlocal textwidth=80
  " Go files tab configuration
  autocmd FileType go setl softtabstop=4 shiftwidth=4
  " From and for vim-go plugin
  autocmd FileType go let g:go_fmt_command = "goimports"
  autocmd FileType go let g:go_highlight_functions = 1
  autocmd FileType go let g:go_highlight_methods = 1
  autocmd FileType go let g:go_highlight_structs = 1
  autocmd FileType go let g:go_highlight_operators = 1
  autocmd FileType go let g:go_highlight_build_constraints = 1
  autocmd FileType go nmap <Leader>gd <Plug>(go-doc)
  autocmd FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
  autocmd FileType go nmap <leader>t <Plug>(go-test)
  autocmd FileType go nmap <leader>c <Plug>(go-coverage)
  " Ruby and Rails autocomplete functionality
  autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
  autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
  autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
  autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
  " vim-rspec
  autocmd FileType ruby,eruby let g:rspec_command = "!bundle exec rspec {spec}"
  autocmd FileType ruby,eruby nmap <Leader>t :call RunCurrentSpecFile()<CR>
  autocmd FileType ruby,eruby nmap <Leader>s :call RunNearestSpec()<CR>
  autocmd FileType ruby,eruby nmap <Leader>l :call RunLastSpec()<CR>
  autocmd FileType ruby,eruby nmap <Leader>a :call RunAllSpecs()<CR>
augroup END
